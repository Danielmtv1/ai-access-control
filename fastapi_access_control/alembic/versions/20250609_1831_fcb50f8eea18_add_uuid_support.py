"""add_uuid_support

Revision ID: fcb50f8eea18
Revises: fbe68e946fc7
Create Date: 2025-06-09 18:31:56.007002+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'fcb50f8eea18'
down_revision: Union[str, None] = 'fbe68e946fc7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Enable UUID extension
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp"')
    
    # Clear all existing data to avoid conversion conflicts
    op.execute('TRUNCATE TABLE permissions CASCADE')
    op.execute('TRUNCATE TABLE cards CASCADE') 
    op.execute('TRUNCATE TABLE users CASCADE')
    op.execute('TRUNCATE TABLE doors CASCADE')
    op.execute('TRUNCATE TABLE mqtt_messages CASCADE')
    
    # Drop foreign key constraints first
    op.drop_constraint('cards_user_id_fkey', 'cards', type_='foreignkey')
    op.drop_constraint('permissions_user_id_fkey', 'permissions', type_='foreignkey')
    op.drop_constraint('permissions_door_id_fkey', 'permissions', type_='foreignkey')
    op.drop_constraint('permissions_card_id_fkey', 'permissions', type_='foreignkey')
    op.drop_constraint('permissions_created_by_fkey', 'permissions', type_='foreignkey')
    
    # Drop defaults first, then convert to UUID
    op.execute('ALTER TABLE users ALTER COLUMN id DROP DEFAULT')
    op.execute('ALTER TABLE cards ALTER COLUMN id DROP DEFAULT')
    op.execute('ALTER TABLE doors ALTER COLUMN id DROP DEFAULT')
    op.execute('ALTER TABLE permissions ALTER COLUMN id DROP DEFAULT')
    op.execute('ALTER TABLE mqtt_messages ALTER COLUMN id DROP DEFAULT')
    
    # Convert to UUID using SQL ALTER statements directly
    op.execute('ALTER TABLE users ALTER COLUMN id TYPE UUID USING uuid_generate_v4()')
    op.execute('ALTER TABLE cards ALTER COLUMN id TYPE UUID USING uuid_generate_v4()')
    op.execute('ALTER TABLE cards ALTER COLUMN user_id TYPE UUID USING uuid_generate_v4()')
    op.execute('ALTER TABLE doors ALTER COLUMN id TYPE UUID USING uuid_generate_v4()')
    op.execute('ALTER TABLE permissions ALTER COLUMN id TYPE UUID USING uuid_generate_v4()')
    op.execute('ALTER TABLE permissions ALTER COLUMN user_id TYPE UUID USING uuid_generate_v4()')
    op.execute('ALTER TABLE permissions ALTER COLUMN door_id TYPE UUID USING uuid_generate_v4()')
    op.execute('ALTER TABLE permissions ALTER COLUMN card_id TYPE UUID USING uuid_generate_v4()')
    op.execute('ALTER TABLE permissions ALTER COLUMN created_by TYPE UUID USING uuid_generate_v4()')
    op.execute('ALTER TABLE mqtt_messages ALTER COLUMN id TYPE UUID USING uuid_generate_v4()')
    
    # Set new UUID defaults
    op.execute('ALTER TABLE users ALTER COLUMN id SET DEFAULT uuid_generate_v4()')
    op.execute('ALTER TABLE cards ALTER COLUMN id SET DEFAULT uuid_generate_v4()')
    op.execute('ALTER TABLE doors ALTER COLUMN id SET DEFAULT uuid_generate_v4()')
    op.execute('ALTER TABLE permissions ALTER COLUMN id SET DEFAULT uuid_generate_v4()')
    op.execute('ALTER TABLE mqtt_messages ALTER COLUMN id SET DEFAULT uuid_generate_v4()')
    
    # Recreate foreign key constraints
    op.create_foreign_key('cards_user_id_fkey', 'cards', 'users', ['user_id'], ['id'])
    op.create_foreign_key('permissions_user_id_fkey', 'permissions', 'users', ['user_id'], ['id'])
    op.create_foreign_key('permissions_door_id_fkey', 'permissions', 'doors', ['door_id'], ['id'])
    op.create_foreign_key('permissions_card_id_fkey', 'permissions', 'cards', ['card_id'], ['id'])
    op.create_foreign_key('permissions_created_by_fkey', 'permissions', 'users', ['created_by'], ['id'])


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               existing_server_default=sa.text("nextval('users_id_seq'::regclass)"))
    op.alter_column('permissions', 'created_by',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('permissions', 'card_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('permissions', 'door_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('permissions', 'user_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('permissions', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('mqtt_messages', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('doors', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               existing_server_default=sa.text("nextval('doors_id_seq'::regclass)"))
    op.alter_column('cards', 'user_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('cards', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    # ### end Alembic commands ### 